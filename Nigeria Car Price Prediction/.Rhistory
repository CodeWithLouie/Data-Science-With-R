install.packages(c("brew", "cli", "commonmark", "cpp11", "crayon", "curl", "devtools", "evaluate", "foreign", "gert", "isoband", "jsonlite", "learnr", "lifecycle", "lpSolve", "lvec", "purrr", "ragg", "readr", "renv", "rlang", "rmarkdown", "testthat", "tidyselect", "tinytex", "vctrs", "vroom"))
library(ggplot2)
install.packages("class")
library(readr)
Raw_US_income_date <- read_csv("EDA/Raw US income date.csv")
View(Raw_US_income_date)
plot(Raw_US_income_date$Income, Raw_US_income_date$GeoName)
View(Raw_US_income_date)
library(readr)
Immigration_data <- read_csv("EDA/Immigration data.csv")
View(Immigration_data)
library(readr)
url1 <- read_csv(https://assets.datacamp.com/production/
repositories/718/datasets/
9055dac929e4515286728a2a5dae9f25f0e4eff6/donors.csv)
url1 <- read_csv(https://assets.datacamp.com/production/
repositories/718/datasets/
9055dac929e4515286728a2a5dae9f25f0e4eff6/donors.csv)
url1 <- download.file(https://assets.datacamp.com/production/
repositories/718/datasets/
9055dac929e4515286728a2a5dae9f25f0e4eff6/donors.csv)
url1 <- download.file(https://assets.datacamp.com/production/
repositories/718/datasets/
9055dac929e4515286728a2a5dae9f25f0e4eff6/donors.csv, "~")
url1 <- download.file(https://assets.datacamp.com/production/repositories/718/datasets/9055dac929e4515286728a2a5dae9f25f0e4eff6/donors.csv, "~")
library(sigr)
library(sigr)
install.packages("wrapr")
library(sigr)
library(dplyr)
unemployment <- readRDS("unemployment.rds")
setwd("~/Dataset/Machine learning regression")
unemployment <- readRDS("unemployment.rds")
glimpse(unemployment)
fml1 <- as.formula("female_unemployment ~ male_unemployment")
fml1
unemployment_md <- lm(fml1, data = unemployment)
summary(unemployment_md)
library(broom)
glance(unemployment_md)
library(sigr)
wrapFTest(unemployment_md)
newrate = 4.5
unemployment$predict <- predict(unemployment_md)
ggplot(unemployment, aes(predict, female_unemployment)) +
geom_point() +
geom_abline(color = "darkblue")
library(ggplot2)
ggplot(unemployment, aes(predict, female_unemployment)) +
geom_point() +
geom_abline(color = "darkblue")
ggplot(unemployment, aes(predict, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
pred <- predict(unemployment_md, newdata = newrate)
pred
pred <- predict(unemployment_md, newdata = newrate)
newrate = 4.5
pred <- predict(unemployment_md, newdata = newrate)
newrate = 5
unemployment$predict <- predict(unemployment_md)
library(ggplot2)
ggplot(unemployment, aes(predict, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
pred <- predict(unemployment_md, newdata = newrate)
unemployment$predictin <- predict(unemployment_md)
ggplot(unemployment, aes(prediction, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
ggplot(unemployment, aes(prediction, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
ggplot(unemployment, aes(prediction, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
unemployment$prediction <- predict(unemployment_md)
unemployment$prediction <- predict(unemployment_md)
library(ggplot2)
ggplot(unemployment, aes(prediction, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
pred <- predict(unemployment_md, newdata = newrate)
install.packages("WVPlots")
install.packages("vtreat")
setwd("~/Dataset/Machine learning regression")
library(dplyr)
unemployment <- readRDS("unemployment.rds")
glimpse(unemployment)
fml1 <- as.formula("female_unemployment ~ male_unemployment")
fml1
unemployment_md <- lm(fml1, unemployment)
summary(unemployment_md)
library(broom)
glance(unemployment_md)
library(sigr)
wrapFTest(unemployment_md)
unemployment$prediction <- predict(unemployment_md)
library(ggplot2)
ggplot(unemployment, aes(prediction, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
pred
pred <- predict(unemployment_md, newdata = newrate)
View(unemployment)
mean(unemployment$female_unemployment)
mean(unemployment$prediction)
set.seed(200)
fml1 <- as.formula("female_unemployment ~ male_unemployment")
fml1
unemployment_md <- lm(fml1, unemployment)
summary(unemployment_md)
unemployment$prediction <- predict(unemployment_md)
geom_point() +
ggplot(unemployment, aes(prediction, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
ggplot(unemployment, aes(prediction, female_unemployment)) +
geom_point() +
geom_abline(color = "red")
mean(unemployment$female_unemployment)
mean(unemployment$prediction)
View(unemployment)
setwd("~/Data Science Workspace/Data-Science-With-R")
library(readr)
library(dplyr)
library(ggplot2)
train <- read_csv("train.csv")
test <- read_csv("test.csv")
test.survived <- test %>%
mutate(
Survived = rep("none", nrow(test))
)
head(test.survived)
train.test <- rbind(train, test.survived)
convert_func <- function(x) {
x <- as.factor(x)
}
# Convert Sex, Pclass, Sex, Survived, SibSp, Parch, Embrked to factors
# check the structure
# create a function to convert variable class
convert_func <- function(x) {
x <- as.factor(x)
}
glimpse(train.test)
train.test <- train.test %>%
mutate(
Pclass = convert_func(Pclass),
Sex = convert_func(Sex),
Survived = convert_func(Survived),
Parch = convert_func(Parch),
SibSp = convert_func(SibSp),
Embarked = convert_func(Embarked)
)
glimpse(train.test)
train.test %>%
count(Survived)
train.test %>%
count(Pclass)
summary(train.test$Sex)
summary(train.test$SibSp)
summary(train.test$Parch)
summary(train.test$Age)
ggplot(train.test[1:890, ], aes(Pclass)) +
geom_bar() +
ggtitle("Pclass Distribution")
ggplot(train.test[1:890, ], aes(Pclass, fill = factor(Survived))) +
geom_bar() +
xlab("Passenger Class") +
labs(fill = "Survived") +
ggtitle("Pclass and Survived")
ggplot(train.test[1:890, ], aes(Age))+
geom_histogram() +
ggtitle("Age Distribution")
ggplot(train.test[1:891, ], aes(Age, fill = Survived)) +
geom_histogram() +
ggtitle("Age and survived")
ggplot(train.test[1:891, ], aes(Sex)) +
geom_bar() +
ggtitle("Sex Distribution")
ggplot(train.test[1:891, ], aes(Sex, fill = Survived)) +
geom_bar() +
ggtitle("Sex and Survived")
ggplot(train.test[1:891, ], aes(Age, fill = Survived)) +
geom_histogram() +
facet_wrap(~ Pclass) +
ggtitle("Age by Pclass and Survived")
ggplot(train.test[1:891, ], aes(SibSp)) +
geom_bar() +
ggtitle("SibSp Distribution")
ggplot(train.test[1:891, ], aes(SibSp, fill = Survived)) +
geom_bar() +
ggtitle("SibSp and Survived")
ggplot(train.test[1:891, ], aes(Parch)) +
geom_bar() +
ggtitle("Parch Distribution")
ggplot(train.test[1:891, ], aes(Parch, fill = Survived)) +
geom_bar() +
ggtitle("Parch and Survived")
# create a childadult_function
chAdult_func <- function(x) {
case_when(
x <= 15 ~ "Child", TRUE ~ "Adult"
)
}
Adult_Child <- NULL #create a null file
for (i in 1:nrow(train.test)) {
Adult_Child <- c(Adult_Child, chAdult_func(train.test[i, "Age"]))
}
# create a new column and add the Adult_Child vector
train.test <- train.test %>%
mutate(Age_group = Adult_Child)
# call summary on the new variable
table(train.test$Age_group)
# create a childadult_function
chAdult_func <- function(x) {
case_when(
x <= 13 ~ "Child",
x>= 13 & x <= 19 ~ "Teenager" ~ TRUE ~ "Adult"
)
}
Adult_Child <- NULL #create a null file
for (i in 1:nrow(train.test)) {
Adult_Child <- c(Adult_Child, chAdult_func(train.test[i, "Age"]))
}
# create a childadult_function
chAdult_func <- function(x) {
case_when(
x <= 13 ~ "Child",
x>= 13 & x <= 19 ~ "Teenager", TRUE ~ "Adult"
)
}
Adult_Child <- NULL #create a null file
for (i in 1:nrow(train.test)) {
Adult_Child <- c(Adult_Child, chAdult_func(train.test[i, "Age"]))
}
# create a new column and add the Adult_Child vector
train.test <- train.test %>%
mutate(Age_group = Adult_Child)
# call summary on the new variable
table(train.test$Age_group)
ggplot(train.test[1:891, ], aes(Age_group, fill = Survived)) +
geom_bar() +
facet_wrap(~ Pclass) +
ggtitle("Age Group Survival Across Pclass")
ggplot(train.test[1:891, ], aes(Age_group, fill = Survived)) +
geom_bar() +
facet_wrap(~ Pclass ~ SibSp) +
ggtitle("Age Group Survival by SibSp Across Pclass")
# create a vector of the sibsp and parch variable and add them together
train.temp <- c(train$SibSp, test$SibSp)
test.temp <- c(test$Parch, train$Parch)
train.test <- train.test %>%
mutate(Family_size = as.factor(train.temp + test.temp + 1))
ggplot(train.test[1:891, ], aes(Age_group, fill = Survived)) +
geom_bar() +
facet_wrap(~ Family_size) +
ggtitle("Age vs Survived by Family Size")
library(ranger)
library(randomForest)
args(ranger)
rf.train1 <- train.test[1:891, c("Sex", "Pclass", "Age_group", "Family_size")]
rf.train2 <- train.test[1:891, c("Sex", "Pclass", "Age_group")]
set.seed(2022)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
rf.label <- as.factor(train$Survived)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model
model2
model
varImpPlot(model) # this has more accuracy
set.seed(2022)
rf.test <- train.test[892:1309, c("Sex", "Pclass", "Age_group", "Family_size")]
prediction <- predict(model, rf.test)
table(prediction)
submission.file <- data.frame(PassengerId = rep(892:1309), Survived = prediction)
View(submission.file)
write_csv(submission.file, "Titanic-Randomforest-prediction-2022.csv")
source("~/Data Science Workspace/Data-Science-With-R/Titanic Disaster Prediction - Kaggle Submission/titanic.Rmd")
source("~/Data Science Workspace/Data-Science-With-R/Titanic Disaster Prediction - Kaggle Submission/titanic.Rmd")
knit_with_parameters("~/Data Science Workspace/Data-Science-With-R/Titanic Disaster Prediction - Kaggle Submission/titanic.Rmd")
rf.train1 <- train.test[1:891, c("Sex", "Pclass", "Age_group", "Family_size")]
rf.train2 <- train.test[1:891, c("Sex", "Pclass", "Age", "Family_size")]
set.seed(2022)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model
model2
model2
?randomForest
getTree(model)
getTree(model, k = 1, labelVar = TRUE)
rf.train2 <- train.test[1:891, c("Sex", "Pclass","Family_size")]
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model
model2
rf.label <- as.factor(train$Survived)
setwd("~/Data Science Workspace/Data-Science-With-R/Nigeria Car Price Prediction")
library(readr)
library(dplyr)
car.price <- read_csv('Nigerian_Car_Prices.csv')
car.price <- read_csv('Nigerian_Car_Prices.csv')
gc()
glimpse(car.price)
unique(car.price$Make)
car.price %>%
group_by(Make) %>%
count()
car.price %>%
group_by(Make) %>%
count() %>%
arrange(desc(Make))
car.price %>%
group_by(Make) %>%
arrange(desc(Make)) %>%
count()
car.price %>%
group_by(Make) %>%
summarise(Total = n()) %>%
arrange(desc())
car.price %>%
group_by(Make) %>%
summarise(Total = n()) %>%
arrange(desc(Total))
library(assertive)
car.price %>%
assert_all_are_not_na()
car.price %>%
assert_all_are_not_na() %>%
count()
car.price %>%
group_by(Make, Fuel, Condition, `Engine Size`) %>%
summarise(Total = n()) %>%
arrange(desc(Total))
car.price %>%
filter(Condition == NA) %>%
count()
car.price %>%
filter(is.na()) %>%
count()
car.price %>%
filter(is.na())
car.price %>%
filter(is.na(Condition))
car.price %>%
filter(is.na(Condition)) %>%
count()
